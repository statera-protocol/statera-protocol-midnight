module CustomLibrary {
    import CompactStandardLibrary;
    export { MintMetadata, calculateHFactor, DivisionFunction, generateUserId, getMintMetadata, hashMintMetadata};
    
    /* Structure for Private state */
    struct MintMetadata {
        collateral: Uint<64>;
        debt: Uint<64>;
    }

    witness division(divident: Uint<64>, divisor:Uint<64>): [Uint<64>, Uint<64>];
    witness get_mintmetadata_private_state(_depositId: Bytes<32>): MintMetadata;
    
 
    circuit calculateHFactor(collateralAmount: Uint<64>, amountToMint: Uint<64>, liquidationThreshold: Uint<8>): Uint<128>{
        const percentageDivisor: Uint<64> = 100;
        const healthFactor = DivisionFunction((collateralAmount * liquidationThreshold) as Uint<64>, (amountToMint * percentageDivisor) as Uint<64>);
        return healthFactor;
    }

    circuit DivisionFunction(dividend: Uint<64>, divisor: Uint<64>): Uint<128> {
        assert (divisor != 0, "Invalid divisor provided");
        
        const [quotient, remainder] = disclose(division(dividend, divisor));
        assert (remainder < divisor, "Reminder error");
        return quotient;
    }

    circuit generateUserId(sk: Bytes<32>): Bytes<32>{
        return persistentHash<Vector<2, Bytes<32>>>(
            [ 
                pad(32, "susd:user"),
                persistentHash<Vector<2, Bytes<32>>>(
                    [sk, kernel.self().bytes]
                )
             ]
        );
    }

    circuit getMintMetadata(_depositId: Bytes<32>): MintMetadata{
        const {debt, collateral} = disclose(get_mintmetadata_private_state(disclose(_depositId)));
        return MintMetadata {
            collateral,
            debt
        };
    } 

    circuit hashMintMetadata (metadata: MintMetadata, randomizer: Bytes<32>): Bytes<32> {
        return persistentCommit<MintMetadata>(metadata, randomizer);
    }
    
}
